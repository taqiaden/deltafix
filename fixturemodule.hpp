//==============================================================================
//  WARNING!!  This file is overwritten by the Block Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//      
//        This file was generated by the NX Block Styler
//        Created by: taqiaden
//              Version: NX 10
//              Date: 01-18-2021  (Format: mm-dd-yyyy)
//              Time: 14:48
//
//==============================================================================
#ifndef FIXTUREMODULE_H_INCLUDED
#define FIXTUREMODULE_H_INCLUDED
//------------------------------------------------------------------------------
//These includes are needed for the following template code
//------------------------------------------------------------------------------
#include "NXOpen/Body.hxx"
#include "NXOpen/Direction.hxx"
#include "NXOpen/DisplayManager.hxx"
#include "NXOpen/DisplayModification.hxx"
#include "NXOpen/DisplayableObject.hxx"
#include "NXOpen/Expression.hxx"
#include "NXOpen/Facet_FacetedBodyCollection.hxx"
#include "NXOpen/Features_BodyFeature.hxx"
#include "NXOpen/Features_Extrude.hxx"
#include "NXOpen/Features_ExtrudeBuilder.hxx"
#include "NXOpen/Features_Feature.hxx"
#include "NXOpen/Features_FeatureCollection.hxx"
#include "NXOpen/Part.hxx"
#include "NXOpen/PartCollection.hxx"
#include "NXOpen/Preferences_SessionVisualizationVisual.hxx"
#include <NXOpen/Annotations_Note.hxx>
#include <NXOpen/AttributeManager.hxx>
#include <NXOpen/AttributePropertiesBaseBuilder.hxx>
#include <NXOpen/AttributePropertiesBuilder.hxx>
#include <NXOpen/BasePart.hxx>
#include <NXOpen/BlockStyler_BlockDialog.hxx>
#include <NXOpen/BlockStyler_Button.hxx>
#include <NXOpen/BlockStyler_CurveCollector.hxx>
#include <NXOpen/BlockStyler_DoubleBlock.hxx>
#include <NXOpen/BlockStyler_DrawingArea.hxx>
#include <NXOpen/BlockStyler_Enumeration.hxx>
#include <NXOpen/BlockStyler_ExpressionBlock.hxx>
#include <NXOpen/BlockStyler_FaceCollector.hxx>
#include <NXOpen/BlockStyler_FileSelection.hxx>
#include <NXOpen/BlockStyler_Group.hxx>
#include <NXOpen/BlockStyler_IntegerBlock.hxx>
#include <NXOpen/BlockStyler_Label.hxx>
#include <NXOpen/BlockStyler_MultilineString.hxx>
#include <NXOpen/BlockStyler_PropertyList.hxx>
#include <NXOpen/BlockStyler_SectionBuilder.hxx>
#include <NXOpen/BlockStyler_Toggle.hxx>
#include <NXOpen/BlockStyler_UIBlock.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Expression.hxx>
#include <NXOpen/ExpressionCollection.hxx>
#include <NXOpen/ExpressionGroup.hxx>
#include <NXOpen/ExpressionGroupCollection.hxx>
#include <NXOpen/Face.hxx>
#include <NXOpen/NXException.hxx>
#include <NXOpen/NXMessageBox.hxx>
#include <NXOpen/NXObjectManager.hxx>
#include <NXOpen/Session.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/UI.hxx>
#include <cmath>
#include <fstream>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>
#include <uf.h>
#include <uf_csys.h>
#include <uf_defs.h>
#include <uf_disp.h>
#include <uf_drf.h>
#include <uf_modl.h>
#include <uf_obj.h>
#include <uf_sf.h>
#include <uf_ui.h>
#include <uf_ui_types.h>
#include <unordered_map>
//------------------------------------------------------------------------------
// Namespaces needed for following template
//------------------------------------------------------------------------------
using namespace std;
using namespace NXOpen;
using namespace NXOpen::BlockStyler;
#define max(x, y) (((x) > (y)) ? (x) : (y))
#define min(x, y) (((x) < (y)) ? (x) : (y))
class DllExport fixturemodule
{
	// class members
public:
	static Session *theSession;
	static UI *theUI;
	fixturemodule();
	~fixturemodule();
	int Show();
	//----------------------- BlockStyler Callback Prototypes ---------------------
	// The following member function prototypes define the callbacks 
	// specified in your BlockStyler dialog.  The empty implementation
	// of these prototypes is provided in the fixturemodule.cpp file. 
	// You are REQUIRED to write the implementation for these functions.
	//------------------------------------------------------------------------------
	struct arrayLocation { int a, b; };
	vector<vector<vector<double>>> appliedForcesMoments_atZeroRef;
	Expression * fixturemodule::getExpression(char const* nameOfExpression);
	Expression * fixturemodule::getExpression(char const* nameOfExpression, NXOpen::Part* partName);
	Expression * fixturemodule::getExpression(string nameOfExpression);
	NXOpen::Features::HolePackage * fixturemodule::tagToHoleFeature(tag_t tag);
	NXOpen::NXObject *nXObjectBoundry;
	NXOpen::Point* fixturemodule::tag_tToPoint(tag_t tag);
	NXOpen::TaggedObject * fixturemodule::tag_tToTaggedObject(tag_t tag);
	NXString elapsedTime;
	NXString fixturemodule::boundingbodies(NXString featureName);
	NXString fixturemodule::extrudeSketch(Sketch *sketchToExtrude, string startLimit, string endlimit, bool reverseDirection);
	Point2d centroid; 
	Point2d fixturemodule::zeroLocationOfPointsCloud();
	Point2d transformed_CenterPoint; 
	Point2d zeroLocation_transformed;
	Point3d fixturemodule::ReversedPoint(Point3d transformedPoint);
	Point3d fixturemodule::transformedPoint(Point3d transformedPoint);
	PropertyList* GetBlockProperties(const char *blockID);
	bool countForFriction;
	bool drawContactPoints;
	bool extremPointsAtOuterBoundary;
	bool fixturemodule::InitilizeForcesMoments_atZeroRef();
	bool fixturemodule::checkLocationAllowance(int**PointsCloud);
	bool fixturemodule::enableOKButton_cb();
	bool fixturemodule::getTransformedAttributes();
	bool fixturemodule::loadANNFiles();
	bool showSimulation;
	bool useCurvetureCorrection;
	double JacobianThreshold;
	double T_max;
	double T_min;
	double alpha;
	double autoTerminate;
	double boundaryDiagonal;
	double clampingForce;
	double coneAngleInRadian;
	double cumulativeCrossDistanceOfFixels;
	double cumulativeInPathDistanceOfFixels;
	double detachmentScore;
	double distanceDeviationAlongPath;
	double distanceDeviationcross;
	double dropPercentage;
	double e;
	double ebsilon;
	double elasticModulus ;
	//double fixturemodule::MaximumDistanceOfExtremePoints(vector<arrayLocation> extremePoints);
	double fixturemodule::annOutput(vector< vector<double>> *input);
	double fixturemodule::annOutput2(vector< vector<double>> *input);
	double fixturemodule::costCalculation(std::vector <double>*pathPointsUnitNorm_x,std::vector <double>*pathPointsUnitNorm_y,vector<int> clampsAndLocatorsPoints,vector<arrayLocation> *extremePoints,vector<arrayLocation>* selectionDomain,vector <double>*curveture2,vector <double>* weights_x,vector <double> *weights_y);
	double fixturemodule::getDistanceSum(vector< arrayLocation> pinLocations);
	double forcesErrorAllowance;
	double frictionCoeficient;
	double frictionOfLoclizationObject, frictionOfrestrainObject;
	double frictionOfSmallRegionDiamter;
	double limdas_spreed;
	double localizationCost;
	double locatorsReactions;
	double machiningForces_totalExposureScore;
	double maxBoundedDistance;
	double maxCrossDistanceOfFixels;
	double maxInPathDistanceOfFixels;
	double maximumBetaToPointsSize;
	double meanDistance;
	double minCrossDistanceOfFixels;
	double minInPathDistanceOfFixels;
	double minimumDiagonalToAlphaRatio;
	double minimumrDetachmentScore, minimumLocaliztionScore;
	double numberOfPointsInBoundedRectangular;
	double pad_bounding_box [ 6 ];
	double poissonsRatio;
	double standardDeviaton;
	double transformed_width,transformed_legnth;
	double transformed_z_distance;
	int apply_cb();
	int beta;
	int close_cb();
	int counter;
	int epochs;
	int filter_cb(NXOpen::BlockStyler::UIBlock* block, NXOpen::TaggedObject* selectObject);
	int fixturemodule::checkIfPointinBoundry(Point3d point, tag_t body);
	int fixturemodule::checkIfPointinBoundry(double point[3], tag_t body);
	int fixturemodule::maximumDistance(vector<arrayLocation> dynamicSelectionSet, vector< arrayLocation> pinLocations);
	int iterations;
	int nodesNumber_V, nodesNumber_H;
	int numberOfInCavityPoints;
	int numberOfPairs;
	int numberOfSurfacePoints;
	int numberOfextremePointsOfOuterPath;
	int ok_cb();
	int reverseAxisMap[3];
	int sizeOfRandomPhase;
	int subGroupSize;
	int transformedAxisMap[3];
	int update_cb(NXOpen::BlockStyler::UIBlock* block);
	std::vector <double> fixturemodule::secondDervativeCalculations(std::vector <double> FirstDervitive,std::vector<arrayLocation> outputPath,double ebsilon);
	std::vector <double>fixturemodule::firstDervativeCalculation(std::vector<arrayLocation> outputPath,double ebsilon);
	std::vector<std::vector<double> >  fixturemodule::getCSVFileData(string defaultPath);
	std::vector<std::vector<double> >  fixturemodule::getCSVFileData(NXOpen::BlockStyler::FileSelection* blockID, string defaultPath);
	std::vector<std::vector<double> > AveDevNormalizationCoeficients;
	std::vector<std::vector<double> > b1;
	std::vector<std::vector<double> > b2;
	std::vector<std::vector<double> > b3;
	std::vector<std::vector<double> > fixturemodule::CSVToArray(string CSVpath);
	std::vector<std::vector<double> > inputMinAndRange;
	std::vector<std::vector<double> > machiningForcesTabular_orginal;
	std::vector<std::vector<double> > outputMinAndRange;
	std::vector<std::vector<double> > w1;
	std::vector<std::vector<double> > w2;
	std::vector<std::vector<double> > w3;
	std::vector<std::vector<double>> fixturemodule::getJacobian(std::vector <double>*pathPointsUnitNorm_x,std::vector <double>*pathPointsUnitNorm_y,int locatorsPointsLocation[3],arrayLocation* KPC,std::vector<arrayLocation>* outputPath);
	string JacobianDetermint;
	string detachmentScoreWithFriction,detachmentScoreWithoutFriction;
	tag_t face;
	tag_t fixturemodule::addPointsToHoleFeature(Point3d points, NXString holeFeature_JID);
	tag_t fixturemodule::createPoint(Point3d point3D);
	tag_t fixturemodule::createPoint(double x, double y, double z);
	vector <double> cumulativeDistanceToCavity_F;
	vector <double> cumulativeDistanceToCavity_all;
	vector <double> cumulativeDistanceToCavity_subSet;
	vector <double> minimumDistanceToCavity_F;
	vector <double> minimumDistanceToCavity_all;
	vector <double> minimumDistanceToCavity_subSet;
	vector <double> pointsInSmallregion_F,pointsInBigRegion_F;
	vector <double> pointsInSmallregion_all,pointsInBigRegion_all;
	vector <double> pointsInSmallregion_subSet,pointsInBigRegion_subSet;
	vector <double>pathPointsUnitNorm_x_subSet;
	vector <double>pathPointsUnitNorm_y_subSet;
	vector<NXOpen::NXString> result;
	vector<Point2d> real_forcesApplicationPoints_fromZeroReference_Transforemed; 
	vector<arrayLocation> selectionDomain;
	vector<bool> forceIsOutsideGeometry;
	vector<bool> iszeroCuttingForce;
	vector<double> areaMomentOfInertia_x;
	vector<double> areaMomentOfInertia_y;
	vector<double> k_obj;
	vector<double> lengthOfShearLine_F;
	vector<double> lengthOfShearLine_all;
	vector<double> lengthOfShearLine_subSet;
	vector<double> limda1,limda2,limda3;
	vector<double> pointsInForawrdConicalBeam_F;
	vector<double> pointsInForawrdConicalBeam_all;
	vector<double> pointsInForawrdConicalBeam_subSet;
	vector<int> fixturemodule::DNSAExecution(vector<arrayLocation> *extremePoints,vector <double>*curveture_subSet,vector <double> *weights_x,vector <double> *weights_y,int pointsInOuterEdge);
	vector<std::vector<double>> fixturemodule::annInputs(vector<int> generatedPointsLocation,int pointsInOuterEdge);
	vector<tag_t>  fixturemodule::drawPoints(std::vector<arrayLocation> outputPath);
	vector<tag_t> pointsCloud2_sub;
	vector<tag_t> pointsCloud3_optimum;
	vector<vector <double>>pathPointsUnitNorm_x_all;
	vector<vector <double>>pathPointsUnitNorm_y_all;
	vector<vector<double>> deflectionScore;
	vector<vector<double>> deflectionScore_x;
	vector<vector<double>> deflectionScore_y;
	vector<vector<vector<double>>> deflectionArms;
	void dialogShown_cb();
	void fixturemodule::ChangeTransperancy(int translucency, NXString bodyName);
	void fixturemodule::DeleteAllPoints(vector<tag_t> objTag);
	void fixturemodule::DeletePoint(tag_t pointTag_t);
	bool fixturemodule::Dervatives(vector<vector<arrayLocation>> * outputPath,int numberOfPairs,double ebsilon,vector <Point2d>&backpoint,vector <Point2d>&forwardpoint,vector <double>&firstDervative2,vector <double>&secondDervative2,vector <double>&curveture2);
	void fixturemodule::UpdateProgressBar(string info);
	void fixturemodule::UpdateResultSummary();
	void fixturemodule::UpdateResultSummary(string info);
	void fixturemodule::UpdateResultSummary_seprator();
	void fixturemodule::ValuesInitilization();
	void fixturemodule::addNewPinLocation(vector< arrayLocation> &pinLocations, vector<arrayLocation> dynamicSelectionSet, int z);
	void fixturemodule::addPointToHoleFeature(NXString holeFeatureName, tag_t pointTag);
	void fixturemodule::cavitiesScore(vector<arrayLocation> extremePoints,vector <double> weights_x,vector <double> weights_y,vector<vector<arrayLocation>>* outputPath);
	void fixturemodule::changeExp(char* expressionName, NXOpen::BlockStyler::ExpressionBlock* expressionBlock);
	void fixturemodule::changeExp(char* expressionName, double value);
	void fixturemodule::clearVariables();
	void fixturemodule::conicalBeamAndShearLine(int**integerOfPointsCloud,vector<vector<arrayLocation>> *outputPath);
	void fixturemodule::copy(int** &snapShotOfPointsCloud, int** &integerOfPointsCloud);
	void fixturemodule::deflictionScore(vector<int> generatedPointsLocation);
	void fixturemodule::deleteBodies(NXString featureName1);
	void fixturemodule::deleteObject(tag_t ObjectTag_t);
	void fixturemodule::discretizationUnit(int** &integerOfPointsCloud,vector<	vector<arrayLocation>>&outputPath,vector<arrayLocation> *extremePoints,vector <double>  *weights_x,vector <double> *weights_y);
	void fixturemodule::distanceScore(int**integerOfPointsCloud,vector<vector<arrayLocation>>* outputPath);
	void fixturemodule::drawPoints(	vector<int> optimumPointsLocation, vector<tag_t> &pointsCloud);
	void fixturemodule::drawPoints(int**integerOfPointsCloud, tag_t** &pointsCloud);
	void fixturemodule::extractNewPath(int**integerOfPointsCloud,vector<arrayLocation>&outputPath,bool isOuterPath );
	bool fixturemodule::extractSelectionDomain(vector <double>&curveture,vector <double>&curveture_subSet,vector<	vector<arrayLocation>>&outputPath);
	void fixturemodule::extrudeCut(Sketch *sketchx, NXString featureName);
	void fixturemodule::faceToPointsCloud(int**integerOfPointsCloud);
	void fixturemodule::filterExtremePoints(int**integerOfPointsCloud);
	void fixturemodule::filterExtremePoints(int**integerOfPointsCloud,vector<arrayLocation>&outputPath,vector<arrayLocation>&extremPoints,vector<arrayLocation>&NonExtremPoints);
	void fixturemodule::fixelsDistanceAttributes(vector<int> generatedPointsLocation,vector<arrayLocation>* selectionDomain);
	void fixturemodule::getBorderPaths(int**integerOfPointsCloud,vector<vector<arrayLocation>>&outputPaths);
	void fixturemodule::getExtremePoints(vector<arrayLocation>&outputPath,vector<arrayLocation>&extremPoints,vector <double> & weights_x,vector <double>& weights_y);
	void fixturemodule::getInitialSelectionSet(int** &integerOfPointsCloud, vector<arrayLocation> &initialSelectionSet, double safeDistance);
	void fixturemodule::getNorms(std::vector<std::vector<arrayLocation>> outputPath,std::vector<std::vector <double>>&pathPointsUnitNorm_x,std::vector<std::vector <double>>&pathPointsUnitNorm_y);
	void fixturemodule::getSelectionSet(int** &integerOfPointsCloud, vector<arrayLocation> &selectionSet, double safeDistance, vector< arrayLocation> pointSToIsolate, double Diameter);
	void fixturemodule::heapArrayToVector(vector<arrayLocation> &SelectionSet, int**PointsCloud);
	void fixturemodule::highlightObj(tag_t objTag);
	void fixturemodule::highlightObj(tag_t objTag, bool highlight);
	void fixturemodule::isolateBorder(int**integerOfPointsCloud);
	bool fixturemodule::mathmaticalAttributesUnit(int** &integerOfPointsCloud,vector<	vector<arrayLocation>>&outputPath,vector<arrayLocation> *extremePoints,vector <double>  *weights_x,vector <double> *weights_y,vector <double>&curveture);
	void fixturemodule::messageInfo(NXString value);
	void fixturemodule::messageInfo(char const* message);
	void fixturemodule::messageInfo(double value);
	void fixturemodule::messageInfo(string message);
	void fixturemodule::offsetFaces(std::vector<string> facesJournalIdentifier);
	void fixturemodule::pointOnAbsoluteWorkPart(double x, double y, double z);
	void fixturemodule::recordElapsedTime(long elapsed_seconds );
	void fixturemodule::refreshPointsHighlight(int**integerOfPointsCloud, tag_t** &pointsCloud);
	void fixturemodule::refreshPointsHighlight(vector<arrayLocation>outputPaths, tag_t** &pointsCloud);
	void fixturemodule::removeAllHighlights(tag_t** pointsCloud);
	void fixturemodule::removePointFromHoleFeature(NXString holeFeatureName, tag_t pointTag_t);
	void fixturemodule::runDNSA();
	void fixturemodule::saveStringToFile(string *text,string fileName);
	void fixturemodule::setPotentialLocation(int**integerOfPointsCloud, arrayLocation selectedLocation, double diameterx);
	void fixturemodule::showFinalResult(tag_t** pointsCloud,vector<int> optimumPointsLocation);
	void fixturemodule::thicknessReduction(int**integerOfPointsCloud, double thicknessReductionx);
	void focusNotify_cb(NXOpen::BlockStyler::UIBlock* block, bool focus);
	void initialize_cb();
	void keyboardFocusNotify_cb(NXOpen::BlockStyler::UIBlock* block, bool focus);
	Direction* fixturemodule::GetDirectionNormalToSketch(Sketch* sketch, bool reverse);
	vector<vector<double>> fixturemodule::computeDefelectionArm(vector<int> indexInOutPutPath,vector<arrayLocation>*selectionDomain,int forceIndex);


private:
	const char* theDlxFileName;
	NXOpen::BlockStyler::BlockDialog* theDialog;
	NXOpen::BlockStyler::Label* progress;// Block type: Label
	NXOpen::BlockStyler::FaceCollector* face_select0;// Block type: Face Collector
	NXOpen::BlockStyler::Group* group5;// Block type: Group
	NXOpen::BlockStyler::Toggle* drawContactPoints_t;// Block type: Toggle
	NXOpen::BlockStyler::Toggle* showSimulation_t;// Block type: Toggle
	NXOpen::BlockStyler::MultilineString* resultSummary;// Block type: Multiline String
	NXOpen::BlockStyler::Button* run;// Block type: Button
	NXOpen::BlockStyler::Group* group0;// Block type: Group
	NXOpen::BlockStyler::IntegerBlock* iterations_i;// Block type: Integer
	NXOpen::BlockStyler::IntegerBlock* epochs_i;// Block type: Integer
	NXOpen::BlockStyler::Group* group;// Block type: Group
	NXOpen::BlockStyler::DoubleBlock* alpha_d;// Block type: Double
	NXOpen::BlockStyler::IntegerBlock* beta_i;// Block type: Integer
	NXOpen::BlockStyler::Group* group1;// Block type: Group
	NXOpen::BlockStyler::Toggle* useCurvatureCorrection_t;// Block type: Toggle
	NXOpen::BlockStyler::Toggle* countForFriction_t;// Block type: Toggle
	NXOpen::BlockStyler::DoubleBlock* frictionCoeficient_d;// Block type: Double
	NXOpen::BlockStyler::Group* group2;// Block type: Group
	NXOpen::BlockStyler::DrawingArea* drawingArea0;// Block type: Drawing Area
	NXOpen::BlockStyler::DoubleBlock* k1_d;// Block type: Double
	NXOpen::BlockStyler::DoubleBlock* k2_d;// Block type: Double
	NXOpen::BlockStyler::DoubleBlock* k3_d;// Block type: Double
	NXOpen::BlockStyler::DoubleBlock* k4_d;// Block type: Double
	NXOpen::BlockStyler::DoubleBlock* k5_d;// Block type: Double
	NXOpen::BlockStyler::Group* group3;// Block type: Group
	NXOpen::BlockStyler::DoubleBlock* clampingForce_d;// Block type: Double
	NXOpen::BlockStyler::FileSelection* machinigForcesData;// Block type: NativeFileBrowser
	NXOpen::BlockStyler::Group* group4;// Block type: Group
	NXOpen::BlockStyler::FileSelection* w1_f;// Block type: NativeFileBrowser
	NXOpen::BlockStyler::FileSelection* w2_f;// Block type: NativeFileBrowser
	NXOpen::BlockStyler::FileSelection* b1_f;// Block type: NativeFileBrowser
	NXOpen::BlockStyler::FileSelection* b2_f;// Block type: NativeFileBrowser
	NXOpen::BlockStyler::FileSelection* inputMinAndRange_f;// Block type: NativeFileBrowser
	NXOpen::BlockStyler::FileSelection* outputMinAndRange_f;// Block type: NativeFileBrowser
	NXOpen::BlockStyler::FileSelection* AveDevNormalizationCoeficients_f;// Block type: NativeFileBrowser
};
#endif //fixturemodule_H_INCLUDED